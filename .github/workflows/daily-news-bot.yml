# GitHub Actions 워크플로우 파일
# 경로: .github/workflows/daily-news-bot.yml

name: 🏭 Daily News Bot

on:
  # 매일 오전 8시 (한국시간) 자동 실행 = UTC 23시
  schedule:
    - cron: '0 23 * * *'
  
  # 수동 실행도 가능 (GitHub Actions 탭에서 Run workflow 버튼)
  workflow_dispatch:
    inputs:
      test_mode:
        description: '테스트 모드로 실행'
        required: false
        default: 'false'
        type: boolean

jobs:
  send-daily-news:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 10분 타임아웃
    
    steps:
    # 1. 코드 체크아웃
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    # 2. Python 환경 설정
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    # 3. 의존성 설치
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 4. 환경 변수 확인
    - name: 🔍 환경 변수 확인
      run: |
        echo "네이버 API 키: ${{ secrets.NAVER_CLIENT_ID != '' && '✅ 설정됨' || '❌ 누락' }}"
        echo "Gemini API 키: ${{ secrets.GEMINI_API_KEY != '' && '✅ 설정됨' || '❌ 누락' }}"
        echo "카카오 API 키: ${{ secrets.KAKAO_API_KEY != '' && '✅ 설정됨' || '⚠️ 테스트 모드' }}"
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
    
    # 5. Daily News Bot 실행
    - name: 🚀 Daily News Bot 실행
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
      run: |
        echo "🌅 Daily News Bot 시작..."
        python daily_news_bot.py
    
    # 6. 실행 결과 업로드 (디버깅용)
    - name: 📤 실행 결과 업로드
      if: always()  # 성공/실패 관계없이 항상 실행
      uses: actions/upload-artifact@v3
      with:
        name: daily-news-result-${{ github.run_number }}
        path: |
          daily_news_result.json
          *.log
        retention-days: 7  # 7일간 보관
    
    # 7. 실행 결과 요약
    - name: 📊 실행 결과 요약
      if: always()
      run: |
        echo "📋 실행 결과 요약"
        echo "================="
        if [ -f "daily_news_result.json" ]; then
          echo "✅ 결과 파일 생성됨"
          # JSON에서 주요 정보 추출
          python -c "
          import json
          try:
              with open('daily_news_result.json', 'r') as f:
                  data = json.load(f)
              
              print(f'뉴스 수집: {data.get(\"statistics\", {}).get(\"news_count\", 0)}개')
              print(f'발송 성공률: {data.get(\"statistics\", {}).get(\"success_rate\", 0):.1f}%')
              print(f'메시지 길이: {data.get(\"statistics\", {}).get(\"total_characters\", 0)}자')
              print(f'실행 상태: {data.get(\"execution_log\", {}).get(\"status\", \"unknown\")}')
          except Exception as e:
              print(f'결과 파싱 오류: {e}')
          "
        else
          echo "❌ 결과 파일 없음"
        fi
    
    # 8. 실패 시 알림 (선택사항)
    - name: 🚨 실패 알림
      if: failure()
      run: |
        echo "❌ Daily News Bot 실행 실패!"
        echo "GitHub Actions 로그를 확인해주세요."
        echo "Repository → Actions → 해당 워크플로우 → 로그 확인"

# 워크플로우 권한 설정
permissions:
  contents: read
  actions: write